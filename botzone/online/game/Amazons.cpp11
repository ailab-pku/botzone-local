// Amazons_judge.cpp : 定义控制台应用程序的入口点。
//

//#include "stdafx.h"


#include <iostream>
#include <sstream>
#include <string>
#include "jsoncpp/json.h"
using namespace std;

#define GRIDSIZE 8
#define OBSTACLE 2
#define judge_black 0
#define judge_white 1
#define grid_black 1
#define grid_white -1

// 注意黑方为0号玩家,白方为1号玩家,每场对局黑方先手
int currBotColor; // 正在等待输出结果的BOT
int dx[] = { -1,-1,-1,0,0,1,1,1 };
int dy[] = { -1,0,1,-1,1,-1,0,1 };
int gridInfo[GRIDSIZE][GRIDSIZE] = { 0 }; // 先x后y,-1为白，1为黑，0为空位，2为障碍
string blackName = "", whiteName = "";
int blackCount = 0, whiteCount = 0;

bool inMap(int x, int y)
{
	if (x < 0 || x >= GRIDSIZE || y < 0 || y >= GRIDSIZE)
		return false;
	return true;
}

inline bool valid(int x0, int y0, int x1, int y1)
{
	int d1 = x1 - x0, d2 = y1 - y0;
	if (d1 == 0 && d2 == 0)
		return false;
	if (d1 * d2 != 0 && d1 != d2 && d1 != -d2)
		return false;
	d1 = d1 > 0 ? 1 : (d1 == 0 ? 0 : -1);
	d2 = d2 > 0 ? 1 : (d2 == 0 ? 0 : -1);
	while (x0 != x1 || y0 != y1)
	{
		x0 += d1;
		y0 += d2;
		if (gridInfo[x0][y0])
			return false;
	}
	return true;
}

bool procStep(int x0, int y0, int x1, int y1, int x2, int y2, int color)
{
	if ((!inMap(x0, y0)) || (!inMap(x1, y1)) || (!inMap(x2, y2)))
		return false;
	if (gridInfo[x0][y0] != color)
		return false;
	gridInfo[x0][y0] = 0;
	if (!valid(x0, y0, x1, y1))
		return false;
	gridInfo[x1][y1] = color;
	if (!valid(x1, y1, x2, y2))
		return false;
	gridInfo[x2][y2] = OBSTACLE;
	return true;
}

int canMove_count(int color)
{
	for (int i = 0; i < GRIDSIZE; ++i) {
		for (int j = 0; j < GRIDSIZE; ++j) {
			bool exist = false;
			if (gridInfo[i][j] == color) {
				for (int k = 0; k < 8; ++k) {
					for (int delta1 = 1; delta1 < GRIDSIZE; delta1++) {
						int x = i + dx[k] * delta1;
						int y = j + dy[k] * delta1;
						if (x < 0 || x >= GRIDSIZE || y < 0 || y >= GRIDSIZE || gridInfo[x][y] != 0)
							break;
						if (gridInfo[x][y] == 0) {
							for (int l = 0; l < 8; ++l) {
								for (int delta2 = 1; delta2 < GRIDSIZE; delta2++) {
									int a = x + dx[l] * delta2;
									int b = y + dy[l] * delta2;
									if (a < 0 || a >= GRIDSIZE || b < 0 || b >= GRIDSIZE)
										break;
									if ((gridInfo[a][b] != 0) && !(a == i && b == j))
										break;
									if ((a == i && b == j) || (gridInfo[a][b] == 0)) {
										if (color == grid_black)
											blackCount++;
										else
											whiteCount++;
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return 0;
}

bool check_ifhasValidMove(int color)//判断待输入方是否存在合法走步
{
	for (int i = 0; i < GRIDSIZE; ++i) {
		for (int j = 0; j < GRIDSIZE; ++j) {
			if (gridInfo[i][j] == color) {
				for (int k = 0; k < 8; ++k) {
					for (int delta1 = 1; delta1 < GRIDSIZE; delta1++) {
						int x = i + dx[k] * delta1; int y = j + dy[k] * delta1;
						if (x < 0 || x >= GRIDSIZE || y < 0 || y >= GRIDSIZE || gridInfo[x][y] != 0)
							break;
						if (gridInfo[x][y] == 0) {
							for (int l = 0; l < 8; ++l) {
								for (int delta2 = 1; delta2 < GRIDSIZE; delta2++) {
									int a = x + dx[l] * delta2; int b = y + dy[l] * delta2;
									if (a < 0 || a >= GRIDSIZE || b < 0 || b >= GRIDSIZE)
										break;
									if ((gridInfo[a][b] != 0) && !(a == i && b == j))
										break;
									if ((a == i && b == j) || (gridInfo[a][b] == 0))
										return true;
								}

							}
						}
					}

				}
			}
		}
	}
	return false;
}

int main()
{
	string str;
	getline(cin, str);
	Json::Reader reader;
	Json::Value input, output;
	reader.parse(str, input);
	input = input["log"];


	gridInfo[0][(GRIDSIZE - 1) / 3] = gridInfo[(GRIDSIZE - 1) / 3][0]
		= gridInfo[GRIDSIZE - 1 - (GRIDSIZE - 1) / 3][0] = gridInfo[GRIDSIZE - 1][(GRIDSIZE - 1) / 3] = 1;  //|白|黑|
	gridInfo[0][GRIDSIZE - 1 - (GRIDSIZE - 1) / 3] = gridInfo[(GRIDSIZE - 1) / 3][GRIDSIZE - 1]
		= gridInfo[GRIDSIZE - 1 - (GRIDSIZE - 1) / 3][GRIDSIZE - 1] = gridInfo[GRIDSIZE - 1][GRIDSIZE - 1 - (GRIDSIZE - 1) / 3] = -1; //|黑|白|
	currBotColor = judge_white;
	if (input.size() == 0)// 先手为黑(0),此时应得到输入
	{
		canMove_count(grid_black);
		canMove_count(grid_white);
		output["display"]["whiteCount"] = whiteCount;
		output["display"]["blackCount"] = blackCount;
		output["command"] = "request";
		output["content"]["0"]["x0"] = -1;
		output["content"]["0"]["y0"] = -1;
		output["content"]["0"]["x1"] = -1;
		output["content"]["0"]["y1"] = -1;
		output["content"]["0"]["x2"] = -1;
		output["content"]["0"]["y2"] = -1;
	}
	else
	{
		for (int i = 1; i < input.size(); i += 2)
		{
			bool isLast = i == input.size() - 1;
			Json::Value content;
			Json::Value display;
			if (currBotColor == judge_white) // 0号玩家 / 黑方
			{
				Json::Value answer = input[i]["0"]["response"].isNull() ? input[i]["0"]["content"] : input[i]["0"]["response"];
				if (((answer.isString() &&
					reader.parse(answer.asString(), content)) ||
					(answer.isObject() &&
					(content = answer, true))) &&
					content["x0"].isInt() && content["y0"].isInt() &&
					content["x1"].isInt() && content["y1"].isInt() &&
					content["x2"].isInt() && content["y2"].isInt()) // 保证输入格式正确
				{
					int x0 = content["x0"].asInt();
					int y0 = content["y0"].asInt();
					int x1 = content["x1"].asInt();
					int y1 = content["y1"].asInt();
					int x2 = content["x2"].asInt();
					int y2 = content["y2"].asInt();
					bool out_continue = procStep(x0, y0, x1, y1, x2, y2, grid_black);
					if (!out_continue && isLast) // 黑方不合法棋步！
					{
						canMove_count(grid_black);
						canMove_count(grid_white);
						output["display"]["whiteCount"] = whiteCount;
						output["display"]["blackCount"] = blackCount;
						output["display"]["err"] = "INVALIDMOVE";
						output["display"]["winner"] = judge_white;
						output["command"] = "finish"; // 判输
						output["content"]["0"] = 0;
						output["content"]["1"] = 2;
					}
					else if (isLast) // 最后一步
					{
						canMove_count(grid_black);
						canMove_count(grid_white);
						output["display"]["whiteCount"] = whiteCount;
						output["display"]["blackCount"] = blackCount;
						output["display"]["x0"] = x0;//传递给播放器的信息
						output["display"]["y0"] = y0;
						output["display"]["x1"] = x1;
						output["display"]["y1"] = y1;
						output["display"]["x2"] = x2;
						output["display"]["y2"] = y2;
						if (!check_ifhasValidMove(grid_white)) // 待输入方无合法走步
						{
							output["display"]["winner"] = judge_black;
							output["command"] = "finish";
							output["content"]["0"] = 2;
							output["content"]["1"] = 0;
						}
						else
						{
							output["command"] = "request";//给待输入方的信息
							output["content"]["1"]["x0"] = x0;
							output["content"]["1"]["y0"] = y0;
							output["content"]["1"]["x1"] = x1;
							output["content"]["1"]["y1"] = y1;
							output["content"]["1"]["x2"] = x2;
							output["content"]["1"]["y2"] = y2;
						}
					}
				}
				else//非法输入
				{
					canMove_count(grid_black);
					canMove_count(grid_white);
					output["display"]["whiteCount"] = whiteCount;
					output["display"]["blackCount"] = blackCount;
					output["display"]["err"] = "INVALID_INPUT_VERDICT_" + input[i]["0"]["verdict"].asString(); // 输出格式错误
					output["display"]["winner"] = currBotColor;
					output["command"] = "finish"; // 判输
					output["content"]["0"] = 0;
					output["content"]["1"] = 2;
				}
			}
			else
			{
				Json::Value answer = input[i]["1"]["response"].isNull() ? input[i]["1"]["content"] : input[i]["1"]["response"];
				if (((answer.isString() &&
					reader.parse(answer.asString(), content)) ||
					(answer.isObject() &&
					(content = answer, true))) &&
					content["x0"].isInt() && content["y0"].isInt() &&
					content["x1"].isInt() && content["y1"].isInt() &&
					content["x2"].isInt() && content["y2"].isInt()) // 保证输入格式正确
				{
					int x0 = content["x0"].asInt();
					int y0 = content["y0"].asInt();
					int x1 = content["x1"].asInt();
					int y1 = content["y1"].asInt();
					int x2 = content["x2"].asInt();
					int y2 = content["y2"].asInt();
					bool out_continue = procStep(x0, y0, x1, y1, x2, y2, grid_white);
					if (!out_continue && isLast) // 不合法棋步！
					{
						canMove_count(grid_black);
						canMove_count(grid_white);
						output["display"]["whiteCount"] = whiteCount;
						output["display"]["blackCount"] = blackCount;
						output["display"]["err"] = "INVALIDMOVE";
						output["display"]["winner"] = judge_black;
						output["command"] = "finish"; // 判输
						output["content"]["0"] = 2;
						output["content"]["1"] = 0;
					}
					else if (isLast) // 最后一步
					{
						canMove_count(grid_black);
						canMove_count(grid_white);
						output["display"]["whiteCount"] = whiteCount;
						output["display"]["blackCount"] = blackCount;
						output["display"]["x0"] = x0;//传递给播放器的信息
						output["display"]["y0"] = y0;
						output["display"]["x1"] = x1;
						output["display"]["y1"] = y1;
						output["display"]["x2"] = x2;
						output["display"]["y2"] = y2;
						if (!check_ifhasValidMove(grid_black)) // 待输入方无合法走步
						{
							output["display"]["winner"] = judge_white;
							output["command"] = "finish";
							output["content"]["0"] = 0;
							output["content"]["1"] = 2;
						}
						else
						{
							output["command"] = "request";//给待输入方的信息
							output["content"]["0"]["x0"] = x0;
							output["content"]["0"]["y0"] = y0;
							output["content"]["0"]["x1"] = x1;
							output["content"]["0"]["y1"] = y1;
							output["content"]["0"]["x2"] = x2;
							output["content"]["0"]["y2"] = y2;
						}
					}
				}
				else//非法输入
				{
					canMove_count(grid_black);
					canMove_count(grid_white);
					output["display"]["whiteCount"] = whiteCount;
					output["display"]["blackCount"] = blackCount;
					output["display"]["err"] = "INVALID_INPUT_VERDICT_" + input[i]["1"]["verdict"].asString(); // 输出格式错误
					output["display"]["winner"] = judge_black;
					output["command"] = "finish"; // 判输
					output["content"]["0"] = 2;
					output["content"]["1"] = 0;
				}
			}
			currBotColor = 1 - currBotColor;
		}
	}
	Json::FastWriter writer;
	std::cout << writer.write(output) << endl;
}