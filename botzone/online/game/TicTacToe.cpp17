#include <iostream>
#include <sstream>
#include <string>
#include <cmath>
#include "jsoncpp/json.h"
using namespace std;

// 说明：井字棋的简单judge

int currBotColor; // 我所执子颜色（1为黑，-1为白，棋盘状态亦同）
int gridInfo[3][3] = { 0 }; // 先x后y，记录棋盘状态
int blackPieceCount = 0, whitePieceCount = 0; 
string blackName = "", whiteName = "";

inline bool inMap(int x, int y)
{
	if (x < 0 || x > 2 || y < 0 || y > 2)
		return false;
	return true;
}

int ProcStep(int x, int y, int color) // 返回0就是出错，否则就是正确
{
	if (color == 0)
		return false;
	if (!inMap(x, y)) 
		return false;
	if (gridInfo[x][y] != 0)
		return false;

	if (color == 1)
		blackPieceCount++;
	else
		whitePieceCount++;
	gridInfo[x][y] = color;
	return true;
}

int checkIfWin() { // ret val: 0 No one wins, 1/-1 black/white wins
	vector<int> sum;
	int s1 = 0, s2 = 0;
	for (int i = 0; i < 3; i++) {
		for (int j = 0; j < 3; j++) {
			s1 += gridInfo[i][j];
			s2 += gridInfo[j][i];
		}
		sum.push_back(s1);
		sum.push_back(s2);
		s1 = 0, s2 = 0;
	}

	for (int i = 0; i < 3; i++) {
		s1 += gridInfo[i][i];
		s2 += gridInfo[i][2 - i];
	}
	sum.push_back(s1);
	sum.push_back(s2);

	for (auto & v : sum) {
		if (v == 3)
			return 1;
		if (v == -3)
			return -1;
	}
	return 0;
}

int main()
{
	string str;
	getline(cin, str);

	//freopen("in.txt", "r", stdin);
	//cin >> str;

	Json::Reader reader;
	Json::Value input, output;
	reader.parse(str, input);
	input = input["log"];

	currBotColor = 1; 
	if (input.size() == 0)
	{
		output["display"] = "";
		output["command"] = "request";
		output["content"]["0"]["x"] = -1;
		output["content"]["0"]["y"] = -1;
	}
	else
	{
		for (int i = 1; i < input.size(); i += 2)
		{
			bool isLast = i == input.size() - 1; // 是不是历史序列的最后一个

			Json::Value content;
			Json::Value display;
			if (currBotColor == 1)
			{
				Json::Value answer = input[i]["0"]["response"].isNull() ? input[i]["0"]["content"] : input[i]["0"]["response"];
				if (((answer.isString() &&
					reader.parse(answer.asString(), content)) ||
					(answer.isObject() &&
					(content = answer, true))) &&
					content["x"].isInt() && content["y"].isInt()) 
				{
					int x = content["x"].asInt();
					int y = content["y"].asInt();
					int procresult = ProcStep(x, y, currBotColor);

					if (!procresult && isLast)
					{
						output["display"]["err"] = "INVALIDMOVE";
						output["display"]["winner"] = 1;
						output["command"] = "finish"; 
						output["content"]["0"] = 0;
						output["content"]["1"] = 2;
					}
					else if (isLast) 
					{
						output["display"]["x"] = x;
						output["display"]["y"] = y;

						int res = checkIfWin();
						if (res == 0) {
							if (blackPieceCount + whitePieceCount == 9) {
								output["winner"] = -1;
								output["command"] = "finish";
								output["content"]["0"] = 1;
								output["content"]["1"] = 1;
							}
							else {
								output["command"] = "request";
								output["content"]["1"]["x"] = x;
								output["content"]["1"]["y"] = y;
							}
						}
						else {
							output["display"]["winner"] = 1 * (res == -1);
							output["command"] = "finish";
							output["content"]["0"] = 2 * (res == 1);
							output["content"]["1"] = 2 * (res == -1);
						}
					}
				}
				else if (isLast) 
				{
					output["display"]["err"] = "INVALID_INPUT_VERDICT_" + input[i]["0"]["verdict"].asString();
					output["display"]["winner"] = 1;
					output["command"] = "finish"; 
					output["content"]["0"] = 0;
					output["content"]["1"] = 2;
				}
			}
			else
			{
				Json::Value answer = input[i]["1"]["response"].isNull() ? input[i]["1"]["content"] : input[i]["1"]["response"];
				if (((answer.isString() &&
					reader.parse(answer.asString(), content)) ||
					(answer.isObject() &&
					(content = answer, true))) &&
					content["x"].isInt() && content["y"].isInt())
				{
					int x = content["x"].asInt();
					int y = content["y"].asInt();
					int procresult = ProcStep(x, y, currBotColor);

					if (!procresult && isLast)
					{
						output["display"]["err"] = "INVALIDMOVE";
						output["display"]["winner"] = 0;
						output["command"] = "finish";
						output["content"]["0"] = 2;
						output["content"]["1"] = 0;
					}
					else if (isLast)
					{
						output["display"]["x"] = x;
						output["display"]["y"] = y;

						int res = checkIfWin();
						if (res == 0) {
							if (blackPieceCount + whitePieceCount == 9) {
								output["winner"] = -1;
								output["command"] = "finish";
								output["content"]["0"] = 1;
								output["content"]["1"] = 1;
							}
							else {
								output["command"] = "request";
								output["content"]["0"]["x"] = x;
								output["content"]["0"]["y"] = y;
							}
						}
						else {
							output["display"]["winner"] = 1 * (res == -1);
							output["command"] = "finish";
							output["content"]["0"] = 2 * (res == 1);
							output["content"]["1"] = 2 * (res == -1);
						}
					}
				}
				else if (isLast)
				{
					output["display"]["err"] = "INVALID_INPUT_VERDICT_" + input[i]["1"]["verdict"].asString();
					output["display"]["winner"] = 0;
					output["command"] = "finish"; 
					output["content"]["0"] = 2;
					output["content"]["1"] = 0;
				}
			}
			currBotColor *= -1;
		}
	}
	Json::FastWriter writer;
	cout << writer.write(output) << endl; 
	cout << endl;
}